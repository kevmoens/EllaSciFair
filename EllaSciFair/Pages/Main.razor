@page "/main"
@using EllaSciFair.Data
@using System.Threading.Tasks
@using System.Runtime.InteropServices
@inject ISignUpRepository repoSignUp
@inject ITakeANumberRepository repoTakeANum
<style>
  body {
    background-image: linear-gradient(#e60073, #33f);
    height: 100vh;
  }
  button {
        border-radius: 25px;
        color: #fff;
        border: none;
        padding: 10px;
        margin: 10px;
        font-size: 20px;
        font-weight: 500;
        cursor: pointer;
        background: linear-gradient(-135deg, #c850c0, #4158d0);
        transition: all 0.3s ease;
    }
</style>

@if (CurrentPerson != null)
{
    <p>
        <h1>@CurrentPerson.Email</h1>
        <h1>@CurrentPerson.Name</h1>
        <h1>@CurrentPerson.Id</h1>
        <button @onclick="OnRecordVideo">Start Recording</button>
        @if (isRecording)
        {
            <progress value="@progress" max="100"/>
        }
        @if (!string.IsNullOrEmpty(CurrentPerson.FileName))
        {
            <h1>DONE</h1>
        }
    </p>
}
@if (SignupQueue != null)
{
    <table>
        @foreach (var signUp in SignupQueue)
        {
            <tr>
                <th>
                    <a  href="javascript: void(0);" @onclick="@(()=> {OnSelectId(signUp);})">@signUp.Id</a>
                </th>
                <th>
                    @signUp.Name
                </th>
                <th>
                    @signUp.Email
                </th>
            </tr>
        }
    </table>
}
@code
{
    TakeANumber? takeANumber;
    SignUp? CurrentPerson;
    List<SignUp>? SignupQueue;
    int progress = 0;
    bool isRecording;
    protected override void OnAfterRender(bool firstRender)
    {
        SignupQueue = repoSignUp?.GetOpenSignUps()?.ToList();
        takeANumber = repoTakeANum.Get();
        base.OnAfterRender(firstRender);
        StateHasChanged();
    }
    void OnSelectId(SignUp signUp)
    {
        if (takeANumber == null)
        {
            return;
        }
        CurrentPerson = signUp;
        takeANumber.CurrentNumber = signUp.Id;
        repoTakeANum.Update(takeANumber);
        isRecording = false;
        StateHasChanged();
    }
    async void OnRecordVideo() 
    {
        isRecording = true;
        progress = 0;
        StateHasChanged();
        if (CurrentPerson == null)
        {
            return;
        }

        //Recording 
        var isLinux=System.Runtime.InteropServices.RuntimeInformation.IsOSPlatform(OSPlatform.Linux);
        if (isLinux)
        {
            await RecordVideo();
        } else
        {
            for (int i = 0; i < 10; i++)
            {
                await Task.Delay(150);
                progress += 10;
                StateHasChanged();
            }
        }

        CurrentPerson.FileName = "done";
        repoSignUp.Update(CurrentPerson);        
        SignupQueue = repoSignUp?.GetOpenSignUps()?.ToList();
        isRecording = false;
        StateHasChanged();
    }
    async Task RecordVideo()
    {

        progress = 1;
        StateHasChanged();

        await Task.Delay(100);
        var dir = new System.IO.DirectoryInfo("/home/pi/Documents/console2/temp");
        foreach (var file in dir.GetFiles("*.mp4", SearchOption.AllDirectories))
        {
            file.Delete();
        }

        if (!System.IO.Directory.Exists("/home/pi/Documents/console2/temp"))
        {
            System.IO.Directory.CreateDirectory("/home/pi/Documents/console2/temp");
        }
        if (!System.IO.Directory.Exists("/home/pi/Documents/console2/temp/1"))
        {
            System.IO.Directory.CreateDirectory("/home/pi/Documents/console2/temp/1");
        }
        if (!System.IO.Directory.Exists("/home/pi/Documents/console2/temp/2"))
        {
            System.IO.Directory.CreateDirectory("/home/pi/Documents/console2/temp/2");
        }
        if (!System.IO.Directory.Exists("/home/pi/Documents/console2/temp/3"))
        {
            System.IO.Directory.CreateDirectory("/home/pi/Documents/console2/temp/3");
        }

        var proc = new System.Diagnostics.Process();
        proc.StartInfo.WorkingDirectory = "/home/pi/Documents/console2/temp";
        proc.StartInfo.FileName = "libcamera-vid";
        proc.StartInfo.Arguments = "-t 10000 --codec mjpeg --segment 1 -o test%05d.jpg";
        proc.Start();
        proc.WaitForExit();

        progress = 2;
        StateHasChanged();
        await Task.Delay(100);
    
        progress += 10;
        StateHasChanged();
        await Task.Delay(100);
        
        var files =  dir.GetFiles("*.jpg");
        var first30 = files.OrderBy(f => f.Name).Take(60);
        var slowfiles = files.OrderBy(f => f.Name).Skip(60).Take(190);
        var last30 = files.OrderBy(f => f.Name).Skip(250).Take(60);
        foreach (var file in first30)
        {
            file.MoveTo(System.IO.Path.Combine(dir.FullName, "1", file.Name));
        }
        foreach (var file in slowfiles)
        {
            file.MoveTo(System.IO.Path.Combine(dir.FullName, "2", file.Name));
        }
        foreach (var file in last30)
        {
            file.MoveTo(System.IO.Path.Combine(dir.FullName, "3", file.Name));
        }

        progress += 10;
        StateHasChanged();
        await Task.Delay(100);
        
        var proc1 = new System.Diagnostics.Process();
        proc1.StartInfo.WorkingDirectory = "/home/pi/Documents/console2/temp/1";
        proc1.StartInfo.FileName = "ffmpeg";
        proc1.StartInfo.Arguments = "-framerate 25 -i test%05d.jpg -c:v libx264 -r 25 output1.mp4";
        proc1.StartInfo.RedirectStandardError = true;
        proc1.Start();
        proc1.WaitForExit();
        if (proc1.ExitCode != 0)
        {
            Console.WriteLine(proc1.StandardError.ReadToEnd());
        }

        progress += 10;
        StateHasChanged();
        await Task.Delay(100);
        
        var proc2 = new System.Diagnostics.Process();
        proc2.StartInfo.WorkingDirectory = "/home/pi/Documents/console2/temp/2";
        proc2.StartInfo.FileName = "ffmpeg";
        proc2.StartInfo.Arguments = "-framerate 8 -pattern_type glob -i \"*.jpg\" -c:v libx264 -r 25 output2.mp4";
        proc2.StartInfo.RedirectStandardError = true;
        proc2.Start();
        proc2.WaitForExit();
        string error2 = string.Empty;
        if (proc2.ExitCode != 0)
        {
            error2 = proc2.StandardError.ReadToEnd();
            Console.WriteLine(error2);
        }


        progress += 10;
        StateHasChanged();
        await Task.Delay(100);
        
        var proc3 = new System.Diagnostics.Process();
        proc3.StartInfo.WorkingDirectory = "/home/pi/Documents/console2/temp/3";
        proc3.StartInfo.FileName = "ffmpeg";
        proc3.StartInfo.Arguments = "-framerate 25 -pattern_type glob -i \"*.jpg\" -c:v libx264 -r 25 output3.mp4";
        proc3.StartInfo.RedirectStandardError = true;
        proc3.Start();
        proc3.WaitForExit();
        string error3 = string.Empty;
        if (proc3.ExitCode != 0)
        {
            error3 = proc3.StandardError.ReadToEnd();
            Console.WriteLine(error3);
        }

        foreach (var file in dir.GetFiles("*.jpg", SearchOption.AllDirectories))
        {
            file.Delete();
        }

        foreach (var file in dir.GetFiles("*.mp4", SearchOption.AllDirectories))
        {
            file.MoveTo($"/home/pi/Documents/console2/temp/{file.Name}");
        }

        progress += 10;
        StateHasChanged();
        string concatFiles = "file '/home/pi/Documents/console2/temp/output1.mp4'";
        concatFiles += System.Environment.NewLine + "file '/home/pi/Documents/console2/temp/output2.mp4'";
        concatFiles += System.Environment.NewLine + "file '/home/pi/Documents/console2/temp/output3.mp4'";
        System.IO.File.WriteAllText("/home/pi/Documents/console2/temp/fileList.txt", concatFiles);

        var procJoin = new System.Diagnostics.Process();
        procJoin.StartInfo.WorkingDirectory = "/home/pi/Documents/console2/temp";
        procJoin.StartInfo.FileName = "ffmpeg";
        procJoin.StartInfo.Arguments = "-safe 0 -f concat -i fileList.txt -c copy output.mp4";
        procJoin.Start();
        procJoin.WaitForExit();

        System.IO.File.Move("/home/pi/Documents/console2/temp/output.mp4",$"/home/pi/Videos/{CurrentPerson.Id}.mp4");

        progress = 100;
        StateHasChanged();
        await Task.Delay(100);
    }
}