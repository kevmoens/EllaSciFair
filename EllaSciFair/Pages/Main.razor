@page "/main"
@using EllaSciFair.Data
@using System.Threading.Tasks
@inject ISignUpRepository repoSignUp
@inject ITakeANumberRepository repoTakeANum
<style>
  body {
    background-image: linear-gradient(#e60073, #33f);
    height: 100vh;
  }
  button {
        border-radius: 25px;
        color: #fff;
        border: none;
        padding: 10px;
        margin: 10px;
        font-size: 20px;
        font-weight: 500;
        cursor: pointer;
        background: linear-gradient(-135deg, #c850c0, #4158d0);
        transition: all 0.3s ease;
    }
</style>

@if (CurrentPerson != null)
{
    <p>
        <h1>@CurrentPerson.Email</h1>
        <h1>@CurrentPerson.Name</h1>
        <h1>@CurrentPerson.Id</h1>
        <button @onclick="OnRecordVideo">Start Recording</button>
        @if (isRecording)
        {
            <progress value="@progress" max="100"/>
        }
        @if (!string.IsNullOrEmpty(CurrentPerson.FileName))
        {
            <h1>DONE</h1>
        }
    </p>
}
@if (SignupQueue != null)
{
    <table>
        @foreach (var signUp in SignupQueue)
        {
            <tr>
                <th>
                    <a  href="javascript: void(0);" @onclick="@(()=> {OnSelectId(signUp);})">@signUp.Id</a>
                </th>
                <th>
                    @signUp.Name
                </th>
                <th>
                    @signUp.Email
                </th>
            </tr>
        }
    </table>
}
@code
{
    TakeANumber? takeANumber;
    SignUp? CurrentPerson;
    List<SignUp>? SignupQueue;
    int progress = 0;
    bool isRecording;
    protected override void OnAfterRender(bool firstRender)
    {
        SignupQueue = repoSignUp?.GetOpenSignUps()?.ToList();
        takeANumber = repoTakeANum.Get();
        base.OnAfterRender(firstRender);
        StateHasChanged();
    }
    void OnSelectId(SignUp signUp)
    {
        if (takeANumber == null)
        {
            return;
        }
        CurrentPerson = signUp;
        takeANumber.CurrentNumber = signUp.Id;
        repoTakeANum.Update(takeANumber);
        isRecording = false;
        StateHasChanged();
    }
    async void OnRecordVideo() 
    {
        isRecording = true;
        progress = 0;
        StateHasChanged();
        if (CurrentPerson == null)
        {
            return;
        }

        //Recording 
        for (int i = 0; i < 10; i++)
        {
            await Task.Delay(150);
            progress += 10;
            StateHasChanged();
        }


        CurrentPerson.FileName = "done";
        repoSignUp.Update(CurrentPerson);        
        SignupQueue = repoSignUp?.GetOpenSignUps()?.ToList();
        isRecording = false;
        StateHasChanged();
    }
}